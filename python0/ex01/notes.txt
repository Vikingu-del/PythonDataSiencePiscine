import datetime
import pytz

### naive time

## datetime.date

# d = datetime.date(2016, 7, 24)
# print(d) # 2016-07-24

# tdayLocaldate = datetime.date.today()
# print(tdayLocaldate) # 2025-08-30

# tyear = tdayLocaldate.year
# print(tyear) # 2025

# tmonth = tdayLocaldate.month
# print(tmonth) # 8

# weekday = tdayLocaldate.weekday() # Monday is 0 and Sunday is 6
# isoweekday = tdayLocaldate.isoweekday() # Monday is 1 and Sunday is 7

# print("f: weekday: ", weekday) # 5
# print("f: isoweekday: ", isoweekday) # 6

# tdelta = datetime.timedelta(days=7)
# print(tdelta)
# print(d - tdelta) # 2025-09-06

# # date2 = date1 + timedelta
# # timedelta = date1 (+/-) date2

# bday = datetime.date(2026, 3, 21)
# tillbday = bday - tdayLocaldate
# print(tillbday.total_seconds()) # 20332800.0

## datetime.time
# working with hours minutes seconds microseconds
# t = datetime.time(9, 30, 42, 100000)
# print(t)
# print(t.hour) # 9
# print(t.minute) # 30
# print(t.second) # 42
# print(t.microsecond) # 100000

## datetime.datetime
# dt = datetime.datetime(2024, 8, 30, 9, 30, 42, 100000)
# print(dt) # 2024-08-30 09:30:42.100000
# print(dt.date()) # 2024-08-30
# print(dt.time()) # 09:30:42.100000
# print(dt.year) # 2024
# print(dt.month)
# print(dt.day)
# print(dt.hour)
# print(dt.minute)
# print(dt.second)
# print(dt.microsecond)

# tdelta = datetime.timedelta(days=7)
# print(dt + tdelta) # 2024-09-06 09:30:42.100000

# tdelta = datetime.timedelta(hours=12)
# print(dt + tdelta) # 2024-08-30 21:30:42.100000

# dt_today = datetime.datetime.today() # returnes the current local date and time with the timezone of the system
# dt_now = datetime.datetime.now() # is the same as today() but can take a timezone argument
# dt_utcnow = datetime.datetime.utcnow() # returnes the current UTC date and time without timezone info , gives the current utc time but the timezone is set to None
# print("today: ", dt_today) # today:  2024-08-30 14:26:51.123456
# print("now: ", dt_now)
# print("utcnow: ", dt_utcnow)



### Aware time
## pytz is an external package that can be install via pip (pip install pytz)
# dt = datetime.datetime(2024, 8, 30, 9, 30, 42, 100000, tzinfo=pytz.UTC)
# print(dt) # 2024-08-30 09:30:42.100000+00:00
# dt_now = datetime.datetime.now(tz=pytz.UTC) # the most reliable
# print("now: ", dt_now) # now:  2024-08-30 12:26:51.123456+00:00

# dt_utcnow = datetime.datetime.utcnow().replace(tzinfo=pytz.UTC)
# print("utcnow: ", dt_utcnow) # utcnow:  2024-08-30 12:26:51.123456+00:00

# dt_mtn = dt_utcnow.astimezone(pytz.timezone('Europe/Berlin'))
# print("dt_mtn: ", dt_mtn) # dt_mtn:  2024-08-30 06:26:51.123456-06:00

# for tz in pytz.all_timezones:
#     print(tz)

# dt_utcnow = datetime.datetime.now(tz=pytz.UTC)
# print(dt_utcnow)

# dt_mtn = datetime.datetime.now()
# print(dt_mtn)

# mtn_tz = pytz.timezone('US/Mountain')
# dt_mtn = mtn_tz.localize(dt_mtn)

# # dt_east = dt_mtn.astimezone(pytz.timezone('US/Eastern'))
# print(dt_mtn)

## iso format
dt_mtn = datetime.datetime.now(tz=pytz.timezone('US/Mountain'))
print(dt_mtn.isoformat()) # 2024-08-30T06:26:51.123456-06:00
print(dt_mtn.strftime('%B %d, %Y')) # datetime to string

dt_str = 'August 30, 2025'
dt = datetime.datetime.strptime(dt_str, '%B %d, %Y') # string to datetime
print(dt)